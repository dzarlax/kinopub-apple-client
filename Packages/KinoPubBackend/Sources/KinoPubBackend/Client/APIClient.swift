//
//  APIClient.swift
//
//
//  Created by Kirill Kunst on 21.07.2023.
//

import Foundation

public class APIClient {
  private let session: URLSessionProtocol
  private let requestBuilder: RequestBuilder
  private let baseUrl: URL
  private var plugins: [APIClientPlugin]
  private let cacheManager: CacheManaging
  
  public init(
    baseUrl: String, 
    plugins: [APIClientPlugin] = [], 
    session: URLSessionProtocol = URLSessionImpl(session: .shared),
    cacheManager: CacheManaging = MemoryCacheManager()
  ) {
    self.baseUrl = URL(string: baseUrl)!
    self.plugins = plugins
    self.session = session
    self.requestBuilder = RequestBuilder(baseURL: self.baseUrl)
    self.cacheManager = cacheManager
  }

  public func performRequest<T: Codable>(
    with requestData: Endpoint, 
    decodingType: T.Type
  ) async throws -> T {
    
    print("üöÄ [APIClient] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å: \(requestData.path)")
    print("üîß [APIClient] –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–∞–∫: \(T.self)")
    
    // Check cache first for cacheable requests
    if let cacheableRequest = requestData as? CacheableRequest {
      switch cacheableRequest.cachePolicy {
      case .cacheFirst, .memoryOnly:
        if let cachedResult = cacheManager.get(for: cacheableRequest.cacheKey, type: T.self) {
          print("üíæ [APIClient] –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ –¥–ª—è: \(requestData.path)")
          return cachedResult
        }
      case .noCache, .networkFirst:
        break
      }
    }
    
    // Build request
    guard let request = requestBuilder.build(with: requestData) else {
      print("‚ùå [APIClient] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è: \(requestData.path)")
      throw APIClientError.invalidUrlParams
    }

    print("üì° [APIClient] URL: \(request.url?.absoluteString ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")")
    print("üîç [APIClient] –ú–µ—Ç–æ–¥: \(request.httpMethod ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")")

    let preparedRequest = plugins.reduce(request) { $1.prepare(request) }
    
    // Notify plugins
    plugins.forEach { $0.willSend(preparedRequest) }

    do {
      print("‚è≥ [APIClient] –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å...")
      // Perform network request
      let (data, response) = try await session.data(for: preparedRequest)
      print("‚úÖ [APIClient] –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: \(data.count) –±–∞–π—Ç")
      
      // Notify plugins
      plugins.forEach { $0.didReceive(response, data: data) }
      
      // Check if request was cancelled after completion
      try Task.checkCancellation()

      return try handleResponse(data: data, type: T.self, requestData: requestData)
      
    } catch {
      print("‚ùå [APIClient] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ \(requestData.path): \(error)")
      
      // Special handling for cancellation
      if let urlError = error as? URLError, urlError.code == .cancelled {
        print("‚èπ [APIClient] –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω (URLError.cancelled): \(requestData.path)")
      } else if error is CancellationError {
        print("‚èπ [APIClient] –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω (CancellationError): \(requestData.path)")
      }
      
      throw error
    }

  }
  
  // MARK: - Response Handling
  private func handleResponse<T: Codable>(
    data: Data, 
    type: T.Type, 
    requestData: Endpoint
  ) throws -> T {
    print("üîÑ [APIClient] –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...")
    
    // Decode response
    let result = try decode(T.self, from: data, throwDecodingErrorImmediately: false)
    print("‚úÖ [APIClient] –£—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –¥–ª—è: \(requestData.path)")
    
    // Cache result if applicable
    if let cacheableRequest = requestData as? CacheableRequest,
       case .memoryOnly = cacheableRequest.cachePolicy {
      cacheManager.set(result, for: cacheableRequest.cacheKey, ttl: cacheableRequest.cachePolicy.ttl)
      print("üíæ [APIClient] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–µ—à –¥–ª—è: \(requestData.path)")
    }
    
    return result
  }
  
  // MARK: - Cache Management
  public func clearCache() {
    cacheManager.clear()
  }
  
  public func removeCacheEntry(for key: String) {
    cacheManager.remove(for: key)
  }

  // MARK: - Private Methods
  private func decode<T: Codable>(
    _ type: T.Type,
    from data: Data,
    throwDecodingErrorImmediately: Bool
  ) throws -> T where T: Codable {
    print("üîÑ [API Decode] –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∫ \(T.self), —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: \(data.count) –±–∞–π—Ç")
    
    do {
      let result = try JSONDecoder().decode(T.self, from: data)
      print("‚úÖ [API Decode] –£—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ \(T.self)")
      return result
    } catch {
      print("‚ùå [API Decode] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ \(T.self)")
      print("üîç [API Decode] –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: \(error)")
      
      if throwDecodingErrorImmediately {
        print("‚ö° [API Decode] –°—Ä–∞–∑—É –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
        throw APIClientError.decodingError(error)
      }
      
      // Log the response data for debugging
      print("üîç [API Decode] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
      if let jsonString = String(data: data, encoding: .utf8) {
        print("üìÑ [API Response] JSON: \(jsonString)")
      } else {
        print("üìÑ [API Response] Raw data size: \(data.count) bytes")
      }
      
      print("üîÑ [API Decode] –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ BackendError...")
      // Try to decode as backend error
      let result = try decode(BackendError.self, from: data, throwDecodingErrorImmediately: true)
      print("‚úÖ [API Decode] –£—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ BackendError")
      throw APIClientError.networkError(result)
    }
  }
}
