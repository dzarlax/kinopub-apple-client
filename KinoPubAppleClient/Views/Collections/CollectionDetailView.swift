//
//  CollectionDetailView.swift
//  KinoPubAppleClient
//
//  Created by Dzarlax on 02.01.2025.
//

import SwiftUI
import KinoPubBackend
import KinoPubUI

struct CollectionDetailView: View {
  let collection: Collection
  @StateObject private var viewModel = CollectionDetailViewModel()
  @EnvironmentObject var appContext: AppContext
  
  private let columns = [
    GridItem(.adaptive(minimum: 160, maximum: 200), spacing: 12)
  ]
  
  var body: some View {
    ScrollView {
      VStack(alignment: .leading, spacing: 20) {
        // Collection Header
        VStack(alignment: .leading, spacing: 12) {
          Text(collection.title)
            .font(.largeTitle.bold())
          
          if let description = collection.description {
            Text(description)
              .font(.body)
              .foregroundColor(.secondary)
          }
          
          HStack {
            Image(systemName: "rectangle.stack.fill")
              .foregroundColor(.blue)
            Text("\(collection.itemsCount) —Ñ–∏–ª—å–º–æ–≤")
              .font(.subheadline)
              .foregroundColor(.secondary)
          }
        }
        .padding(.horizontal)
        
        Divider()
        
        // Collection Items
        if viewModel.isLoading && viewModel.items.isEmpty {
          VStack {
            ProgressView("–ó–∞–≥—Ä—É–∂–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥–±–æ—Ä–∫–∏...")
              .padding()
            Text("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è")
              .font(.caption)
              .foregroundColor(.secondary)
          }
          .frame(maxWidth: .infinity, maxHeight: .infinity)
          .padding()
          .onAppear {
            print("üîÑ [CollectionDetailView UI] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ProgressView - isLoading: \(viewModel.isLoading), items.count: \(viewModel.items.count)")
          }
        } else if viewModel.items.isEmpty && !viewModel.isLoading {
          VStack {
            Image(systemName: "tray")
              .font(.system(size: 48))
              .foregroundColor(.secondary)
            Text("–í —ç—Ç–æ–π –ø–æ–¥–±–æ—Ä–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
              .font(.headline)
              .foregroundColor(.secondary)
            Text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∂–µ")
              .font(.caption)
              .foregroundColor(.secondary)
          }
          .frame(maxWidth: .infinity, maxHeight: .infinity)
          .padding()
          .onAppear {
            print("üì≠ [CollectionDetailView UI] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - isLoading: \(viewModel.isLoading), items.count: \(viewModel.items.count)")
          }
        } else {
          LazyVGrid(columns: columns, spacing: 12) {
            ForEach(viewModel.items) { item in
              NavigationLink(value: CollectionsRoutes.details(item)) {
                ContentItemView(item: item)
              }
              .buttonStyle(PlainButtonStyle())
            }
          }
          .padding(.horizontal)
          .onAppear {
            print("üé¨ [CollectionDetailView UI] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ç–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - isLoading: \(viewModel.isLoading), items.count: \(viewModel.items.count)")
          }
        }
      }
    }
    .navigationTitle(collection.title)
    .navigationBarTitleDisplayMode(.inline)
    .onAppear {
      print("üëÄ [CollectionDetailView] onAppear –≤—ã–∑–≤–∞–Ω –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: \(collection.title) (ID: \(collection.id))")
      print("üìä [CollectionDetailView] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - isLoading: \(viewModel.isLoading), items.count: \(viewModel.items.count)")
    }
    .refreshable {
      print("üîÑ [CollectionDetailView] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
      await viewModel.refresh(contentService: appContext.contentService)
    }
    .task {
      print("‚ö° [CollectionDetailView] .task –Ω–∞—á–∏–Ω–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: \(collection.title)")
      print("üèóÔ∏è [CollectionDetailView] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ task - collectionId: \(collection.id)")
      await viewModel.loadItems(
        collectionId: collection.id,
        contentService: appContext.contentService
      )
      print("üèÅ [CollectionDetailView] .task –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: \(collection.title)")
    }
    .alert("–û—à–∏–±–∫–∞", isPresented: $viewModel.showError) {
      Button("OK") { viewModel.showError = false }
    } message: {
      Text(viewModel.errorMessage)
    }
  }
}

// MARK: - ViewModel

@MainActor
class CollectionDetailViewModel: ObservableObject {
  @Published var items: [MediaItem] = []
  @Published var isLoading = false
  @Published var showError = false
  @Published var errorMessage = ""
  
  private var currentPage = 1
  private var collectionId: Int?
  
  func loadItems(collectionId: Int, contentService: VideoContentService) async {
    guard !isLoading else { 
      print("‚ö†Ô∏è [Collection Detail] –£–∂–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
      return 
    }
    
    self.collectionId = collectionId
    isLoading = true
    print("üîÑ [Collection Detail] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥–±–æ—Ä–∫–∏ \(collectionId), —Å—Ç—Ä–∞–Ω–∏—Ü–∞: \(currentPage)")
    
    do {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      print("‚è≥ [Collection Detail] –ñ–¥–µ–º 0.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏...")
      try await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫—É–Ω–¥—ã
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω
      try Task.checkCancellation()
      print("‚úì [Collection Detail] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
      
      let response = try await contentService.fetchCollectionItems(
        id: collectionId,
        page: currentPage
      )
      
      // –ï—â–µ –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
      try Task.checkCancellation()
      
      print("‚úÖ [Collection Detail] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç - status: \(response.status)")
      print("üìä [Collection Detail] –ö–æ–ª–ª–µ–∫—Ü–∏—è: \(response.collection.title)")
      print("üìù [Collection Detail] –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: \(response.items.count)")
      
      if response.items.isEmpty {
        print("‚ö†Ô∏è [Collection Detail] –ú–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç–æ–π!")
      } else {
        print("üé¨ [Collection Detail] –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: \(response.items[0].title ?? "–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")")
      }
      
      items.append(contentsOf: response.items)
      print("üìã [Collection Detail] –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ UI: \(items.count)")
      
    } catch {
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏
      if error is CancellationError {
        print("‚èπ [Collection Detail] –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      } else {
        print("‚ùå [Collection Detail] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: \(error)")
        if let apiError = error as? APIClientError {
          print("üì° [Collection Detail] API Error: \(apiError)")
          errorMessage = "–û—à–∏–±–∫–∞ API: \(apiError.localizedDescription)"
        } else {
          print("üîß [Collection Detail] –û–±—â–∞—è –æ—à–∏–±–∫–∞: \(error.localizedDescription)")
          errorMessage = "–û—à–∏–±–∫–∞: \(error.localizedDescription)"
        }
        showError = true
      }
    }
    
    isLoading = false
    print("üèÅ [Collection Detail] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
  }
  
  func refresh(contentService: VideoContentService) async {
    guard let collectionId = collectionId else { 
      print("‚ö†Ô∏è [Collection Detail] Refresh: collectionId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
      return 
    }
    print("üîÑ [Collection Detail] –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ \(collectionId)")
    items.removeAll()
    currentPage = 1
    await loadItems(collectionId: collectionId, contentService: contentService)
  }
}

#Preview {
  NavigationView {
    CollectionDetailView(
      collection: Collection(
        id: 1,
        title: "–¢–æ–ø —Ñ–∏–ª—å–º—ã 2024",
        watchers: 10,
        views: 25,
        created: Int(Date().timeIntervalSince1970),
        updated: Int(Date().timeIntervalSince1970),
        posters: nil
      )
    )
    .environmentObject(AppContext.mock())
  }
} 